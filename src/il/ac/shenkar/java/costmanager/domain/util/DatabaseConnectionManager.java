package il.ac.shenkar.java.costmanager.domain.util;
import il.ac.shenkar.java.costmanager.domain.usecase.implementations.AddCategoryUseCaseImpl;

import java.io.IOException;
import java.sql.*;
import java.util.Objects;

public class DatabaseConnectionManager {
    private static DatabaseConnectionManager instance;
    private Connection connection;
    private final ConfigurationManager configurationManager = new ConfigurationManager();

    private DatabaseConnectionManager() throws IOException, SQLException {
        try {
            setConnection(DriverManager.getConnection(configurationManager.getJdbcURL()));
            System.out.println("Connected to Derby DB");

            listAllTablesAndData();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void setInstance(DatabaseConnectionManager instance) {
        DatabaseConnectionManager.instance = instance;
    }

    public static synchronized DatabaseConnectionManager getInstance() throws SQLException, IOException {
        if (instance == null) {
            setInstance(new DatabaseConnectionManager());
        }
        return instance;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public Connection getConnection() {
        return connection;
    }

    private void listAllTablesAndData() throws SQLException {
        if (connection != null) {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet resultSet = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            System.out.println("Tables in the database:");

            while (resultSet.next()) {
                String tableName = resultSet.getString("TABLE_NAME");
                System.out.println(tableName);
                printTableData(tableName);
            }

            resultSet.close();
        }
    }

    private void printTableData(String tableName) throws SQLException {
        Statement statement = connection.createStatement();
        ResultSet dataResultSet = statement.executeQuery("SELECT * FROM " + tableName);
        ResultSetMetaData metaData = dataResultSet.getMetaData();
        int columnCount = metaData.getColumnCount();

        System.out.println("Data in table '" + tableName + "':");

        while (dataResultSet.next()) {
            StringBuilder rowData = new StringBuilder();
            for (int i = 1; i <= columnCount; i++) {
                String columnName = metaData.getColumnName(i);
                String columnValue = dataResultSet.getString(i);
                rowData.append(columnName).append(": ").append(columnValue).append(", ");
            }
            System.out.println(rowData.toString());
        }

        dataResultSet.close();
        statement.close();
    }

    public void createTableIfNotExists(String tableName) {
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet resultSet = metaData.getTables(null, null, tableName, null);
            if (!resultSet.next()) {
                String createTableQuery;
                String[] initialCatFields;
                if (Objects.equals(tableName, "CATEGORIES")) {
                    createTableQuery = "CREATE TABLE CATEGORIES (id INT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128))";
                }
                else if (Objects.equals(tableName, "COSTS")) {
                    createTableQuery = "CREATE TABLE COSTS (id INT GENERATED BY DEFAULT AS IDENTITY, category VARCHAR(128), amount DOUBLE, currency VARCHAR(128), description VARCHAR(256), date DATE)";
                }
                else {
                    System.out.println("No such table as " + tableName);
                    return;
                }
                Statement statement = connection.createStatement();
                statement.executeUpdate(createTableQuery);
                statement.close();
                if (Objects.equals(tableName, "CATEGORIES")) {
                    initialCatFields = configurationManager.getStarterCategoryNames();
                    AddCategoryUseCaseImpl addCategoryUseCase = new AddCategoryUseCaseImpl();
                    for (String cat : initialCatFields){
                        addCategoryUseCase.addCategory(cat);
                    }
                }
                System.out.println("Created table " + tableName);
            } else {
                 System.out.println("Table " + tableName + " already exists.");
//                Statement statement = connection.createStatement();
//                statement.executeUpdate("DROP TABLE COSTS");
//                statement.executeUpdate("DROP TABLE CATEGORIES");
//                System.out.println("DROPPED TABLES!!!!!");
            }

            resultSet.close();
            listAllTablesAndData();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}